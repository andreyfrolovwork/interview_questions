window.interview_tasks = window.interview_tasks || []
window.interview_tasks.push({
    qNum: 4,
    run: function () {
        var obj1 = { n: 1 }
        var obj2 = obj1
        obj1.x = obj1 = { n: 2 }
        console.log(obj1.x)

        const _result = `
В момент, когда идёт выражение obj1.x = obj1 = { n: 2 } — левая часть obj1.x ещё ссылается на старый obj1, потому что выражения в JavaScript читаются и выполняются слева направо, но присваивания справа налево.

Действия выпооняются в следующем порядке:

Сначала вычисляется obj1.x — берётся ссылка на объект, на который указывает obj1 в этот момент (назовём его старыйObj).

Затем вычисляется правая часть — создаётся новый объект { n: 2 }.

Потом выполняется obj1 = { n: 2 } — теперь obj1 указывает на новый объект.

Наконец, идёт присваивание .x = ... — но .x принадлежит старомуObj, а не новому, потому что obj1.x вычислился ещё до того, как obj1 переехал.`
        console.log('Объяснение: ', _result)
    },
    code: `var obj1 = { n: 1 }
var obj2 = obj1
obj1.x = obj1 = { n: 2 }
console.log(obj1.x)

const _result = \`
В момент, когда идёт выражение obj1.x = obj1 = { n: 2 } — левая часть obj1.x ещё ссылается на старый obj1, потому что выражения в JavaScript читаются и выполняются слева направо, но присваивания справа налево.

Действия выпооняются в следующем порядке:

Сначала вычисляется obj1.x — берётся ссылка на объект, на который указывает obj1 в этот момент (назовём его старыйObj).

Затем вычисляется правая часть — создаётся новый объект { n: 2 }.

Потом выполняется obj1 = { n: 2 } — теперь obj1 указывает на новый объект.

Наконец, идёт присваивание .x = ... — но .x принадлежит старомуObj, а не новому, потому что obj1.x вычислился ещё до того, как obj1 переехал.\`
console.log('Объяснение: ', _result)`,
})
